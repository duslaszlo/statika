/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * kettamaszu.java
 *
 * Created on 2011.08.22., 12:00:37
 */
package statika;

import java.sql.*;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SD-LEAP
 */
public class kettamaszu extends javax.swing.JInternalFrame {
// A változók deklarálása

    static Connection co;
    static Statement st;
    static ResultSet rs;
    tartoadatok tarto = new tartoadatok();

    /**
     * Creates new form kettamaszu
     */
    public kettamaszu() {

        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A projekt nevének a beolvasása
            rs = st.executeQuery("SELECT projekt FROM projectek where aktiv = '1'");
            while (rs.next()) {
                tarto.ProjektNev = rs.getString(1);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        //System.out.println("Az aktuális projekt: " + tarto.ProjektNev);
        initComponents();
        projekt.setText(tarto.ProjektNev);
        // A jComboBox1 feltöltése
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A projekt nevének a beolvasása
            tarto.parancs = "SELECT tartonev FROM tartok where projekt = '";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "';";
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                jComboBox1.addItem(rs.getString(1));
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // A szelvények feltöltése
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A szelvénytár beolvasása
            rs = st.executeQuery("SELECT nev FROM szelveny where megnevezes <> 'Összetett szelvény' order by nev ");
            while (rs.next()) {
                szelveny.addItem(rs.getString(1));
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TartoHossz = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        erok = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        terhelesek = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        nyomatekok = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        Ero_hozzaadas = new javax.swing.JButton();
        Megoszlo_hozzaadas = new javax.swing.JButton();
        Nyomatek_hozzaadas = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        projekt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        konzol1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        konzol2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        ujero = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        ujerohely = new javax.swing.JTextField();
        ujmegoszlohossz = new javax.swing.JTextField();
        ujmegoszlohely = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ujmegoszlo = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        ujnyomatek = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        ujnyomatekhely = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        profil = new javax.swing.JTextField();
        szelveny = new javax.swing.JComboBox();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        pngrajz = new javax.swing.JLabel();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Kéttámaszú tartó nyíróerő, nyomatéki és lehajlási ábrái");
        setLayer(1);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        TartoHossz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TartoHosszActionPerformed(evt);
            }
        });

        jLabel1.setText("Tartóhossz:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Erők (kN és cm):");

        erok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Erő ", "Hely ", "Törlés"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        erok.setShowHorizontalLines(false);
        erok.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                erokAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(erok);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Megoszlók (kN/cm  és cm):");

        terhelesek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Teher", "Hely ", "Hossz ", "Profil", "Törlés"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(terhelesek);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Nyomatékok (kNcm és cm):");

        nyomatekok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nyomaték ", "Hely", "Törlés"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(nyomatekok);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("A tartó neve:");

        Ero_hozzaadas.setText("Hozzáad");
        Ero_hozzaadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ero_hozzaadasActionPerformed(evt);
            }
        });

        Megoszlo_hozzaadas.setText("Hozzáad");
        Megoszlo_hozzaadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Megoszlo_hozzaadasActionPerformed(evt);
            }
        });

        Nyomatek_hozzaadas.setText("Hozzáad");
        Nyomatek_hozzaadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nyomatek_hozzaadasActionPerformed(evt);
            }
        });

        jComboBox1.setMaximumRowCount(4);

        projekt.setEditable(false);
        projekt.setFont(new java.awt.Font("Courier New", 1, 11)); // NOI18N
        projekt.setText("Projektnév");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Projektnév:");

        jButton4.setText("Tartó kiválasztás");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("cm");

        jLabel8.setText("Konzol1:");

        jLabel9.setText("Konzol2:");

        jLabel10.setText("cm");

        jLabel11.setText("cm");

        jButton5.setText("Módosít");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Módosít");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Módosít");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel12.setText("Új erő:");

        jLabel14.setText("Hely:");

        jLabel18.setText("Hossz:");

        jLabel19.setText("Hely:");

        jLabel20.setText("Új teher:");

        jLabel22.setText("Új nyomaték:");

        jLabel23.setText("Hely:");

        jLabel26.setText("Szelvény:");

        jLabel27.setText("Profilok:");

        jButton8.setText("Módosít");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Új szelvény");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(16, 16, 16))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(20, 20, 20)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(projekt)
                            .addComponent(profil, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TartoHossz, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(konzol1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(konzol2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel11)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton8))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(219, 219, 219)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, 0, 285, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(pngrajz, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ujmegoszlo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ujmegoszlohely, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel18)
                                .addGap(2, 2, 2)
                                .addComponent(ujmegoszlohossz, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Megoszlo_hozzaadas, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ujero, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ujerohely, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addComponent(Ero_hozzaadas, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel27)
                        .addGap(11, 11, 11)
                        .addComponent(szelveny, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(ujnyomatek, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ujnyomatekhely, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(Nyomatek_hozzaadas, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(szelveny)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton7))
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Ero_hozzaadas, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ujerohely, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ujero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ujmegoszlohely)
                                .addComponent(jLabel19)
                                .addComponent(ujmegoszlohossz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18)
                                .addComponent(Megoszlo_hozzaadas))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ujmegoszlo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(ujnyomatek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(ujnyomatekhely, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Nyomatek_hozzaadas)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(projekt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(profil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(konzol1)
                                .addComponent(jLabel10))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(TartoHossz)
                                .addComponent(jLabel7)
                                .addComponent(jLabel1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(konzol2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)
                                .addComponent(jLabel9)
                                .addComponent(jButton8))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pngrajz, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TartoHosszActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TartoHosszActionPerformed
        // TODO add your handling code here:        
        /*
         tarto.megnevezes = "MDI tartó ver1 – tartó5";
         tarto.beolvas();*/
        tarto.hossz = Float.parseFloat(TartoHossz.getText());
        System.out.println(tarto.hossz);
    }//GEN-LAST:event_TartoHosszActionPerformed

    private void Ero_hozzaadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ero_hozzaadasActionPerformed
        // TODO add your handling code here:
        int UpdateQuery;
        //String parancs;
        DefaultTableModel tableModel = (DefaultTableModel) erok.getModel();
        if (ujero.getText().length() > 0) {
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                // Az új erő lerögzítése
                tarto.parancs = "insert into tartoerok (projekt,tartonev,ertek,hely,jelleg,szelveny) values ('";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "','";
                tarto.parancs = tarto.parancs + tarto.megnevezes + "','";
                tarto.parancs = tarto.parancs + ujero.getText() + "','";
                tarto.parancs = tarto.parancs + ujerohely.getText() + "','1','');";
                //System.out.println("SQL parancs: " + tarto.parancs);
                //rs = st.executeQuery(parancs);           
                UpdateQuery = st.executeUpdate(tarto.parancs);
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            // A Jtable frissítése
            int j = tableModel.getRowCount();
            if (j > 0) {
                for (int k = 0; k < j; k++) {
                    tableModel.removeRow(0);
                }
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '1' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[3];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            erok.setModel(tableModel);
            erok.setShowGrid(true);
            ujero.setText("");
            ujerohely.setText("");
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_Ero_hozzaadasActionPerformed

    private void Megoszlo_hozzaadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Megoszlo_hozzaadasActionPerformed
        // TODO add your handling code here:
        int UpdateQuery;
        DefaultTableModel tableModel = (DefaultTableModel) terhelesek.getModel();
        if (ujmegoszlo.getText().length() > 0) {
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                // Az új terhelés lerögzítése
                tarto.parancs = "insert into tartoerok (projekt,tartonev,ertek,hely,hossz,jelleg,szelveny) values ('";
                tarto.parancs = tarto.parancs + tarto.ProjektNev.toString() + "','";
                tarto.parancs = tarto.parancs + tarto.megnevezes.toString() + "','";
                tarto.parancs = tarto.parancs + ujmegoszlo.getText() + "','";
                tarto.parancs = tarto.parancs + ujmegoszlohely.getText() + "','";
                tarto.parancs = tarto.parancs + ujmegoszlohossz.getText() + "','2','');";

                //System.out.println("SQL parancs: " + tarto.parancs);
                //rs = st.executeQuery(parancs);           
                UpdateQuery = st.executeUpdate(tarto.parancs);
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            // A Jtable frissítése
            int j = tableModel.getRowCount();
            if (j > 0) {
                for (int k = 0; k < j; k++) {
                    tableModel.removeRow(0);
                }
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely,hossz,szelveny FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '2' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[5];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    data[3] = String.valueOf(rs.getFloat(4));
                    data[4] = rs.getString(5);
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            terhelesek.setModel(tableModel);
            terhelesek.setShowGrid(true);
            ujmegoszlo.setText("");
            ujmegoszlohely.setText("");
            ujmegoszlohossz.setText("");
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_Megoszlo_hozzaadasActionPerformed

    private void erokAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_erokAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_erokAncestorAdded

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:        
        DefaultTableModel tableModel_erok = (DefaultTableModel) erok.getModel();
        DefaultTableModel tableModel_terhelesek = (DefaultTableModel) terhelesek.getModel();
        DefaultTableModel tableModel_nyomatekok = (DefaultTableModel) nyomatekok.getModel();
        tarto.megnevezes = jComboBox1.getSelectedItem().toString();
        rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        // A terhek kijelzése
        // Az erők        
        int j = tableModel_erok.getRowCount();
        if (j > 0) {
            for (int k = 0; k < j; k++) {
                tableModel_erok.removeRow(0);
            }
        }
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '1' order by hely;";
            //System.out.println("SQL: " + parancs);
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                String[] data = new String[4];
                data[0] = String.valueOf(rs.getInt(1));
                data[1] = String.valueOf(rs.getFloat(2));
                data[2] = String.valueOf(rs.getFloat(3));
                tableModel_erok.addRow(data);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        erok.setModel(tableModel_erok);
        erok.setShowGrid(true);
        // A megoszló terhelések
        j = tableModel_terhelesek.getRowCount();
        if (j > 0) {
            for (int k = 0; k < j; k++) {
                tableModel_terhelesek.removeRow(0);
            }
        }
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "SELECT id,ertek,hely,hossz,szelveny FROM tartoerok where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '2' order by hely;";
            //System.out.println("SQL: " + parancs);
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                String[] data = new String[5];
                data[0] = String.valueOf(rs.getInt(1));
                data[1] = String.valueOf(rs.getFloat(2));
                data[2] = String.valueOf(rs.getFloat(3));
                data[3] = String.valueOf(rs.getFloat(4));
                data[4] = rs.getString(5);
                tableModel_terhelesek.addRow(data);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        terhelesek.setModel(tableModel_terhelesek);
        terhelesek.setShowGrid(true);
        // A koncentrált nyomatékok
        j = tableModel_nyomatekok.getRowCount();
        if (j > 0) {
            for (int k = 0; k < j; k++) {
                tableModel_nyomatekok.removeRow(0);
            }
        }
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '3' order by hely;";
            //System.out.println("SQL: " + parancs);
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                String[] data = new String[3];
                data[0] = String.valueOf(rs.getInt(1));
                data[1] = String.valueOf(rs.getFloat(2));
                data[2] = String.valueOf(rs.getFloat(3));
                tableModel_nyomatekok.addRow(data);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        nyomatekok.setModel(tableModel_nyomatekok);
        nyomatekok.setShowGrid(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void rajzol() {
        // A tartó metszékeinek számolása és az ábrák újrarajzolása
        // A tartó adatainak újrabeolvasása         
        tarto.beolvas();   // Adatbeolvasás
        tarto.kiszamol();  // T,M,Tau, Szigma kiszámolása
        TartoHossz.setText(String.valueOf(tarto.hossz));
        konzol1.setText(String.valueOf(tarto.konzol1));
        konzol2.setText(String.valueOf(tarto.konzol2));
        profil.setText(tarto.szelveny);
        // A tartórajz kimenete PNG-be        
        tarto.pngrajz();
        // A PNG rajz visszaillesztése
        ImageIcon icon = new ImageIcon(tarto.filenev);
        icon.getImage().flush();
        pngrajz.setIcon(icon);
        pngrajz.updateUI();
    }

    protected ImageIcon createImageIcon(String path,
            String description) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) nyomatekok.getModel();
        int UpdateQuery;
        if (tableModel.getRowCount() > 0) {
            // A Jtable-ben lévő adatok módosítása
            int j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                String[] data = new String[3];
                data[0] = tableModel.getValueAt(k, 0).toString();
                data[1] = tableModel.getValueAt(k, 1).toString();
                data[2] = tableModel.getValueAt(k, 2).toString();
                if (tableModel.getValueAt(k, 3) != null) {
                    // Adattörlés
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A bejelölt tartók törlése
                        tarto.parancs = "delete from tartoerok where id='" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                } else {
                    // Adatmódosítás
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A megváltoztatott erő adatok visszaírása
                        tarto.parancs = "update tartoerok set ertek='" + data[1] + "', ";
                        tarto.parancs = tarto.parancs + " hely='" + data[2] + "' ";
                        tarto.parancs = tarto.parancs + " where id = '" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                }
            }
            // Jtable frissítése
            j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '3' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[3];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            nyomatekok.setModel(tableModel);
            nyomatekok.setShowGrid(true);
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) erok.getModel();
        int UpdateQuery;
        if (tableModel.getRowCount() > 0) {
            // A Jtable-ben lévő adatok módosítása
            int j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                String[] data = new String[3];
                data[0] = tableModel.getValueAt(k, 0).toString();
                data[1] = tableModel.getValueAt(k, 1).toString();
                data[2] = tableModel.getValueAt(k, 2).toString();
                if (tableModel.getValueAt(k, 3) != null) {
                    // Adattörlés
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A bejelölt tartók törlése
                        tarto.parancs = "delete from tartoerok where id='" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + tarto.parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                } else {
                    // Adatmódosítás
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A megváltoztatott erő adatok visszaírása
                        tarto.parancs = "update tartoerok set ertek='" + data[1] + "', ";
                        tarto.parancs = tarto.parancs + " hely='" + data[2] + "' ";
                        tarto.parancs = tarto.parancs + " where id = '" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                }
            }
            // Jtable frissítése
            j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '1' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[3];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            erok.setModel(tableModel);
            erok.setShowGrid(true);
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) terhelesek.getModel();
        int UpdateQuery;
        if (tableModel.getRowCount() > 0) {
            // A Jtable-ben lévő adatok módosítása
            int j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                String[] data = new String[5];
                data[0] = tableModel.getValueAt(k, 0).toString();
                data[1] = tableModel.getValueAt(k, 1).toString();
                data[2] = tableModel.getValueAt(k, 2).toString();
                data[3] = tableModel.getValueAt(k, 3).toString();
                if (tableModel.getValueAt(k, 5) != null) {
                    // Adattörlés
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A bejelölt tartók törlése
                        tarto.parancs = "delete from tartoerok where id='" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                } else {
                    // Adatmódosítás
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A megváltoztatott erő adatok visszaírása
                        tarto.parancs = "update tartoerok set ertek='" + data[1] + "', ";
                        tarto.parancs = tarto.parancs + " hely='" + data[2] + "', ";
                        tarto.parancs = tarto.parancs + " hossz='" + data[3] + "' ";
                        tarto.parancs = tarto.parancs + " where id = '" + data[0] + "';";
                        UpdateQuery = st.executeUpdate(tarto.parancs);
                        //System.out.println("SQL parancs: " + parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                }
            }
            // Jtable frissítése
            j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely,hossz,szelveny FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '2' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[5];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    data[3] = String.valueOf(rs.getFloat(4));
                    data[4] = rs.getString(5);
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            terhelesek.setModel(tableModel);
            terhelesek.setShowGrid(true);
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void Nyomatek_hozzaadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nyomatek_hozzaadasActionPerformed
        // TODO add your handling code here:
        int UpdateQuery;
        DefaultTableModel tableModel = (DefaultTableModel) nyomatekok.getModel();
        if (ujnyomatek.getText().length() > 0) {
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                // Az új megoszló teher lerögzítése
                tarto.parancs = "insert into tartoerok (projekt,tartonev,ertek,hely,jelleg,szelveny) values ('";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "','";
                tarto.parancs = tarto.parancs + tarto.megnevezes + "','";
                tarto.parancs = tarto.parancs + ujnyomatek.getText() + "','";
                tarto.parancs = tarto.parancs + ujnyomatekhely.getText() + "','3','');";
                //System.out.println("SQL parancs: " + tarto.parancs);
                //rs = st.executeQuery(parancs);           
                UpdateQuery = st.executeUpdate(tarto.parancs);
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            // A Jtable frissítése
            int j = tableModel.getRowCount();
            if (j > 0) {
                for (int k = 0; k < j; k++) {
                    tableModel.removeRow(0);
                }
            }
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                st = co.createStatement();
                tarto.parancs = "SELECT id,ertek,hely FROM tartoerok where projekt ='";
                tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '3' order by hely;";
                //System.out.println("SQL: " + parancs);
                rs = st.executeQuery(tarto.parancs);
                while (rs.next()) {
                    String[] data = new String[3];
                    data[0] = String.valueOf(rs.getInt(1));
                    data[1] = String.valueOf(rs.getFloat(2));
                    data[2] = String.valueOf(rs.getFloat(3));
                    tableModel.addRow(data);
                }
                rs.close();
                st.close();
            } catch (InstantiationException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (SQLException e) {
            }
            nyomatekok.setModel(tableModel);
            nyomatekok.setShowGrid(true);
            ujnyomatek.setText("");
            ujnyomatekhely.setText("");
            rajzol();  // A tartó adatainak beolvasása és újrarajzoltatása
        }
    }//GEN-LAST:event_Nyomatek_hozzaadasActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        // A Tartó dimenzionális adatainak megváltoztatása
        int UpdateQuery;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A megváltoztatott adatok visszaírása
            tarto.parancs = "update tartok set";
            if (tarto.tipus == 1) {
                tarto.parancs = tarto.parancs + " hossz='" + TartoHossz.getText() + "' ";
            }
            if (tarto.tipus == 2) {
                tarto.parancs = tarto.parancs + " konzol1='" + konzol1.getText() + "' ";
            }
            if (tarto.tipus == 3) {
                tarto.parancs = tarto.parancs + " hossz='" + TartoHossz.getText() + "', ";
                tarto.parancs = tarto.parancs + " konzol1='" + konzol1.getText() + "', ";
                tarto.parancs = tarto.parancs + " konzol2='" + konzol2.getText() + "' ";
            }
            tarto.parancs = tarto.parancs + " where projekt = '" + tarto.ProjektNev + "' and ";
            tarto.parancs = tarto.parancs + " tartonev = '" + tarto.megnevezes + "'; ";
            UpdateQuery = st.executeUpdate(tarto.parancs);
            //System.out.println("SQL parancs: " + tarto.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        rajzol();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        // Profilváltoztatás                
        float teljeshossz = tarto.hossz + tarto.konzol1 + tarto.konzol2;
        float ertek = 0f;   // Ez lesz a folyómétersúly
        int UpdateQuery;
        DefaultTableModel tableModel = (DefaultTableModel) terhelesek.getModel();
        // A tartóerők között (meg)lévő megoszló teher kitörlése 
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "delete FROM tartoerok where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '2' ";
            tarto.parancs = tarto.parancs + " and szelveny = '" + tarto.szelveny + "';";
            //System.out.println("SQL: " + tarto.parancs);
            UpdateQuery = st.executeUpdate(tarto.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        tarto.szelveny = szelveny.getSelectedItem().toString();
        // Az új tartó folyómétersúlyának kikeresése
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "SELECT (fmsuly / 10000) as folyometersuly FROM szelveny where nev ='" + tarto.szelveny + "';";
            //System.out.println("SQL: " + parancs);
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                ertek = rs.getFloat("folyometersuly");
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // A profilnév frissítése
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "update tartok set szelveny = '" + szelveny.getSelectedItem().toString() + "' where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "';";
            //System.out.println("SQL: " + parancs);
            UpdateQuery = st.executeUpdate(tarto.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // Az új tartóerő bevitele        
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A megváltozott profil adatának lerögzítése megoszlóként
            tarto.parancs = "insert into tartoerok (projekt,tartonev,szelveny,ertek,hely,hossz,jelleg) values ('";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "','";
            tarto.parancs = tarto.parancs + tarto.megnevezes + "','";
            tarto.parancs = tarto.parancs + tarto.szelveny + "','";
            tarto.parancs = tarto.parancs + ertek + "','0','";
            tarto.parancs = tarto.parancs + teljeshossz + "','2');";
            //System.out.println("SQL parancs: " + parancs);
            //rs = st.executeQuery(parancs);           
            UpdateQuery = st.executeUpdate(tarto.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // A Jtable frissítése
        int j = tableModel.getRowCount();
        if (j > 0) {
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
        }
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            tarto.parancs = "SELECT id,ertek,hely,hossz,szelveny FROM tartoerok where projekt ='";
            tarto.parancs = tarto.parancs + tarto.ProjektNev + "' and tartonev = '" + tarto.megnevezes + "' and jelleg = '2' order by hely;";
            //System.out.println("SQL: " + parancs);
            rs = st.executeQuery(tarto.parancs);
            while (rs.next()) {
                String[] data = new String[5];
                data[0] = String.valueOf(rs.getInt(1));
                data[1] = String.valueOf(rs.getFloat(2));
                data[2] = String.valueOf(rs.getFloat(3));
                data[3] = String.valueOf(rs.getFloat(4));
                data[4] = rs.getString(5);
                tableModel.addRow(data);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        terhelesek.setModel(tableModel);
        terhelesek.setShowGrid(true);
        rajzol();
    }//GEN-LAST:event_jButton9ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ero_hozzaadas;
    private javax.swing.JButton Megoszlo_hozzaadas;
    private javax.swing.JButton Nyomatek_hozzaadas;
    private javax.swing.JTextField TartoHossz;
    private javax.swing.JTable erok;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField konzol1;
    private javax.swing.JTextField konzol2;
    private javax.swing.JTable nyomatekok;
    private javax.swing.JLabel pngrajz;
    private javax.swing.JTextField profil;
    private javax.swing.JTextField projekt;
    private javax.swing.JComboBox szelveny;
    private javax.swing.JTable terhelesek;
    private javax.swing.JTextField ujero;
    private javax.swing.JTextField ujerohely;
    private javax.swing.JTextField ujmegoszlo;
    private javax.swing.JTextField ujmegoszlohely;
    private javax.swing.JTextField ujmegoszlohossz;
    private javax.swing.JTextField ujnyomatek;
    private javax.swing.JTextField ujnyomatekhely;
    // End of variables declaration//GEN-END:variables
}
