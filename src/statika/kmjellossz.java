/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package statika;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SD-LEAP
 */
public class kmjellossz extends javax.swing.JInternalFrame {

    /**
     * Creates new form kmjellossz
     */
    static Connection co;
    static Statement st;
    static ResultSet rs;
    int UpdateQuery;
    kmjellosszadatok profil = new kmjellosszadatok();

    public kmjellossz() {

        initComponents();
        osszetett_szelvenyek.removeAllItems();
        osszetett_szelvenyek.addItem("Válassz");
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A projekt nevének a beolvasása
            profil.parancs = "SELECT nev FROM szelveny where megnevezes = 'Összetett szelvény' order by nev;";
            rs = st.executeQuery(profil.parancs);
            while (rs.next()) {
                osszetett_szelvenyek.addItem(rs.getString(1));
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // A szelvények feltöltése
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A szelvénytár beolvasása
            rs = st.executeQuery("SELECT nev FROM szelveny where megnevezes <> 'Összetett szelvény' order by nev;");
            while (rs.next()) {
                szelveny.addItem(rs.getString(1));
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uj_osszetett = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        osszetett_szelvenyek = new javax.swing.JComboBox();
        Ujszelveny = new javax.swing.JButton();
        Szelveny_kivalaszt = new javax.swing.JButton();
        pngrajz = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alkotoelemek = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        szelveny = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        diffx = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        diffy = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        forgatas = new javax.swing.JSlider();
        fok = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        Mirrorx = new javax.swing.JRadioButton();
        Mirrory = new javax.swing.JRadioButton();
        szelveny_hozzaad = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        Szelveny_modositas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Összetett szelvény konfigurátor");

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel4.setText("Új összetett szelvény definiálás:");

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel2.setText("Meglévő összetett szelvény:");

        Ujszelveny.setText("Hozzáadás");
        Ujszelveny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UjszelvenyActionPerformed(evt);
            }
        });

        Szelveny_kivalaszt.setText("Kiválaszt");
        Szelveny_kivalaszt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Szelveny_kivalasztActionPerformed(evt);
            }
        });

        alkotoelemek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Szelvénynév", "DiffX", "DiffY", "Forgatás", "Tükr_X", "Tükr_Y", "Hiba", "Törlés"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(alkotoelemek);

        jLabel5.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel5.setText("Szelvény-hozzárendelés:");

        jLabel7.setText("Neve:");

        jLabel8.setText("Eltolás X:");

        jLabel9.setText("Eltolás Y:");

        jLabel10.setText("mm");

        jLabel11.setText("mm");

        jLabel12.setText("Forgatás:");

        forgatas.setMaximum(360);
        forgatas.setMinorTickSpacing(1);
        forgatas.setValue(0);
        forgatas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                forgatasStateChanged(evt);
            }
        });

        fok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fokActionPerformed(evt);
            }
        });

        jLabel13.setText("fok");

        Mirrorx.setText("Tükrözés X");

        Mirrory.setText("Tükrözés Y");

        szelveny_hozzaad.setText("Hozzárendelés");
        szelveny_hozzaad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                szelveny_hozzaadActionPerformed(evt);
            }
        });

        Szelveny_modositas.setText("Módosít");
        Szelveny_modositas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Szelveny_modositasActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel1.setText("Az összetett szelvény alkotóelemei:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4)
                        .addGap(47, 47, 47)
                        .addComponent(Ujszelveny, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Szelveny_kivalaszt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(osszetett_szelvenyek, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(Mirrorx)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Mirrory)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(szelveny_hozzaad, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8))
                                    .addGap(21, 21, 21)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(szelveny, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(diffx, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel10)
                                            .addGap(24, 24, 24)
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(diffy, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel11)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(forgatas, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fok, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addGap(22, 22, 22))))
                    .addComponent(uj_osszetett, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Szelveny_modositas, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pngrajz, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pngrajz, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Ujszelveny))
                        .addGap(5, 5, 5)
                        .addComponent(uj_osszetett, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Szelveny_kivalaszt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(osszetett_szelvenyek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Szelveny_modositas)
                            .addComponent(jLabel1))
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(szelveny, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(diffx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(diffy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Mirrorx)
                                    .addComponent(Mirrory)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(forgatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(szelveny_hozzaad)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void szelveny_hozzaadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_szelveny_hozzaadActionPerformed
        // Az alszelvény hozzáadása
        int db = 0;
        float adat = 0;
        String szoveg;
        DefaultTableModel tableModel = (DefaultTableModel) alkotoelemek.getModel();
        // Az első elem a báziselem
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A darabszám beolvasása
            profil.parancs = "SELECT max(bazis) FROM osszetett where ossznev = '" + profil.nev + "';";
            rs = st.executeQuery(profil.parancs);
            while (rs.next()) {
                db = rs.getInt(1);
                db++;
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // Szelvény lerögzítés
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // Az új összetett szelvény lerögzítése
            profil.parancs = "INSERT INTO `osszetett` (`ossznev`,`nev`,`diffx`,`diffy`,`szog`,`mirrorx`,`mirrory`,`bazis`) VALUES ( '";
            profil.parancs = profil.parancs + profil.nev + "','";
            profil.parancs = profil.parancs + szelveny.getSelectedItem().toString() + "','";
            if (db != 0) {
                profil.parancs = profil.parancs + Float.parseFloat(String.valueOf(diffx.getText())) + "','";
                profil.parancs = profil.parancs + Float.parseFloat(String.valueOf(diffy.getText())) + "','";
            } else {
                profil.parancs = profil.parancs + "0','";
                profil.parancs = profil.parancs + "0','";
            }
            profil.parancs = profil.parancs + fok.getText() + "','";
            adat = 0;
            if (Mirrorx.isSelected()) {
                adat = 1;
            }
            profil.parancs = profil.parancs + adat + "','";
            adat = 0;
            if (Mirrory.isSelected()) {
                adat = 1;
            }
            profil.parancs = profil.parancs + adat + "','";
            profil.parancs = profil.parancs + db + "');";
            //System.out.println("SQL parancs: " + profil.parancs);
            //rs = st.executeQuery(parancs);           
            UpdateQuery = st.executeUpdate(profil.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // kirajzolás
        profil.pngrajz();
        //System.out.println(" forgatas:" + profil.forgatas + " mirrorx:" + profil.tukrozesx + "  mirrory:" + profil.tukrozesy);
        szoveg = "./images/szelveny/" + profil.filenev + ".png";
        //System.out.println(" filenevbe:" + szoveg);
        ImageIcon icon = new ImageIcon(szoveg, "A tartorajz");
        icon.getImage().flush();
        pngrajz.setIcon(icon);
        pngrajz.updateUI();
        // A Jtable feltöltése
        // A Jtable törlése
        int j = tableModel.getRowCount();
        if (j > 0) {
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
        }
        // Jtable adatfeltöltése
        for (int i = 1; i <= profil.index; i++) {
            String[] data = new String[8];
            data[0] = String.valueOf(profil.bazis[i]);
            data[1] = profil.profilnev[i];
            data[2] = String.valueOf(profil.diffx[i]);
            data[3] = String.valueOf(profil.diffy[i]);
            data[4] = String.valueOf(profil.forgatas[i]);
            if (profil.problema[i] == 1) {
                data[7] = "Átfedés";
            } else {
                data[7] = " ";
            }
            tableModel.addRow(data);
            if (profil.mirrorx[i] == 1) {
                tableModel.setValueAt(true, i - 1, 5);
            } else {
                tableModel.setValueAt(false, i - 1, 5);
            }
            if (profil.mirrory[i] == 1) {
                tableModel.setValueAt(true, i - 1, 6);
            } else {
                tableModel.setValueAt(false, i - 1, 6);
            }
        }
        // A 2-4 -es oszlopok középre igazítása
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(uj_osszetett.CENTER);
        alkotoelemek.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        alkotoelemek.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        alkotoelemek.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        // A tábla oszlopszélességei
        alkotoelemek.setAutoResizeMode(alkotoelemek.AUTO_RESIZE_OFF);
        alkotoelemek.getColumnModel().getColumn(0).setPreferredWidth(10);
        alkotoelemek.getColumnModel().getColumn(1).setPreferredWidth(105);
        alkotoelemek.getColumnModel().getColumn(2).setPreferredWidth(35);
        alkotoelemek.getColumnModel().getColumn(3).setPreferredWidth(35);
        alkotoelemek.getColumnModel().getColumn(4).setPreferredWidth(55);
        alkotoelemek.getColumnModel().getColumn(5).setPreferredWidth(45);
        alkotoelemek.getColumnModel().getColumn(6).setPreferredWidth(45);
        alkotoelemek.getColumnModel().getColumn(7).setPreferredWidth(45);
        alkotoelemek.getColumnModel().getColumn(8).setPreferredWidth(40);
        alkotoelemek.setModel(tableModel);
        alkotoelemek.setShowGrid(true);

    }//GEN-LAST:event_szelveny_hozzaadActionPerformed

    private void UjszelvenyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UjszelvenyActionPerformed
        //Az új összetett szelvény felvitele
        DefaultTableModel tableModel = (DefaultTableModel) alkotoelemek.getModel();
        profil.nev = uj_osszetett.getText();
        profil.filenevbeiro();
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // Az új összetett szelvény lerögzítése
            profil.parancs = "INSERT INTO `szelveny` (nev,filenev,magassag,szelesseg,v,r,r1,r2,w,w1,u,u1,u2,z,c,h1,t,tgalfa,A,ex,ey,Ix,Kx,Sx,inx,Iy,Ky,Sy,iny,fmsuly,anyag,megnevezes) VALUES('";
            profil.parancs = profil.parancs + profil.nev + "','";
            profil.parancs = profil.parancs + profil.filenev + "','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','','Összetett szelvény');";
            //System.out.println("SQL parancs: " + parancs);
            //rs = st.executeQuery(parancs);           
            UpdateQuery = st.executeUpdate(profil.parancs);
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // Az összetett szelvények újradefiniálása
        osszetett_szelvenyek.removeAllItems();
        osszetett_szelvenyek.addItem("Válassz");
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A projekt nevének a beolvasása
            profil.parancs = "SELECT nev FROM szelveny where megnevezes = 'Összetett szelvény' order by nev;";
            rs = st.executeQuery(profil.parancs);
            while (rs.next()) {
                osszetett_szelvenyek.addItem(rs.getString(1));
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        uj_osszetett.setText(" ");
        // Új szelvény esetén az előző adatait törölni kell
        if (tableModel.getRowCount() > 0) {
            int j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
            alkotoelemek.setModel(tableModel);
            alkotoelemek.setShowGrid(true);
        }
    }//GEN-LAST:event_UjszelvenyActionPerformed

    private void forgatasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_forgatasStateChanged
        // TODO add your handling code here:
        fok.setText(String.valueOf(forgatas.getValue()));
    }//GEN-LAST:event_forgatasStateChanged

    private void fokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fokActionPerformed
        // TODO add your handling code here:
        forgatas.setValue(Integer.parseInt(fok.getText()));
    }//GEN-LAST:event_fokActionPerformed

    private void Szelveny_modositasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Szelveny_modositasActionPerformed
        // TODO add your handling code here:
        String szoveg;
        DefaultTableModel tableModel = (DefaultTableModel) alkotoelemek.getModel();
        int UpdateQuery;
        if (tableModel.getRowCount() > 0) {
            // A Jtable-ben lévő adatok módosítása
            int j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                String[] data = new String[7];
                data[0] = tableModel.getValueAt(k, 0).toString();
                data[1] = tableModel.getValueAt(k, 1).toString();
                data[2] = tableModel.getValueAt(k, 2).toString();
                data[3] = tableModel.getValueAt(k, 3).toString();
                data[4] = tableModel.getValueAt(k, 4).toString();
                data[5] = "0";
                if (tableModel.getValueAt(k, 5).toString().equals("true")) {
                    data[5] = "1";
                }
                data[6] = "0";
                if (tableModel.getValueAt(k, 6).toString().equals("true")) {
                    data[6] = "1";
                    //System.out.println("data[6]_: " + data[6]);
                }
                //System.out.println("data[6]: " + tableModel.getValueAt(k, 6));                
                if (tableModel.getValueAt(k, 8) != null) {
                    // Adattörlés
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A bejelölt tartók törlése
                        profil.parancs = "delete from osszetett where bazis='" + data[0] + "' and ";
                        profil.parancs = profil.parancs + "ossznev = '" + profil.nev + "';";
                        UpdateQuery = st.executeUpdate(profil.parancs);
                        System.out.println("SQL parancs: " + profil.parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                } else {
                    // Adatmódosítás                    
                    try {
                        Class.forName("com.mysql.jdbc.Driver").newInstance();
                        co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
                        st = co.createStatement();
                        // A megváltoztatott profil adatok visszaírása
                        profil.parancs = "update osszetett set szog='" + data[4] + "', ";
                        if (!data[0].equals("0")) {
                            profil.parancs = profil.parancs + "diffx='" + data[2] + "', ";
                            profil.parancs = profil.parancs + "diffy='" + data[3] + "', ";
                        }
                        if (data[5].equals("0")) {
                            profil.parancs = profil.parancs + "mirrorx='0', ";
                        } else {
                            profil.parancs = profil.parancs + "mirrorx='1', ";
                        }
                        if (data[6].equals("0")) {
                            profil.parancs = profil.parancs + "mirrory='0', ";
                        } else {
                            profil.parancs = profil.parancs + "mirrory='1', ";
                        }
                        profil.parancs = profil.parancs + "nev = '" + data[1] + "' ";
                        profil.parancs = profil.parancs + "where bazis = '" + data[0] + "' and ";
                        profil.parancs = profil.parancs + "ossznev = '" + profil.nev + "';";
                        //System.out.println(profil.parancs);
                        UpdateQuery = st.executeUpdate(profil.parancs);
                        //System.out.println(profil.parancs);
                        rs.close();
                        st.close();
                    } catch (InstantiationException e) {
                    } catch (IllegalAccessException e) {
                    } catch (ClassNotFoundException e) {
                    } catch (SQLException e) {
                    }
                }
            }
            // Jtable frissítése
            j = tableModel.getRowCount();
            for (int k = 0; k < j; k++) {
                tableModel.removeRow(0);
            }
            profil.adatbeolvaso();
            // Jtable adatfeltöltése
            for (int i = 1; i <= profil.index; i++) {
                String[] data = new String[8];
                data[0] = String.valueOf(profil.bazis[i]);
                data[1] = profil.profilnev[i];
                data[2] = String.valueOf(profil.diffx[i]);
                data[3] = String.valueOf(profil.diffy[i]);
                data[4] = String.valueOf(profil.forgatas[i]);
                if (profil.problema[i] == 1) {
                    data[7] = "Átfedés";
                } else {
                    data[7] = " ";
                }
                tableModel.addRow(data);
                if (profil.mirrorx[i] == 1) {
                    tableModel.setValueAt(true, i - 1, 5);
                } else {
                    tableModel.setValueAt(false, i - 1, 5);
                }
                if (profil.mirrory[i] == 1) {
                    tableModel.setValueAt(true, i - 1, 6);
                } else {
                    tableModel.setValueAt(false, i - 1, 6);
                }
            }
            // A 2-4 -es oszlopok középre igazítása
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(uj_osszetett.CENTER);
            alkotoelemek.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            alkotoelemek.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            alkotoelemek.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
            // A tábla oszlopszélességei
            alkotoelemek.setAutoResizeMode(alkotoelemek.AUTO_RESIZE_OFF);
            alkotoelemek.getColumnModel().getColumn(0).setPreferredWidth(10);
            alkotoelemek.getColumnModel().getColumn(1).setPreferredWidth(105);
            alkotoelemek.getColumnModel().getColumn(2).setPreferredWidth(35);
            alkotoelemek.getColumnModel().getColumn(3).setPreferredWidth(35);
            alkotoelemek.getColumnModel().getColumn(4).setPreferredWidth(55);
            alkotoelemek.getColumnModel().getColumn(5).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(6).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(7).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(8).setPreferredWidth(40);
            alkotoelemek.setModel(tableModel);
            alkotoelemek.setShowGrid(true);
            // Rajzolás
            profil.pngrajz();
            szoveg = "./images/szelveny/" + profil.filenev + ".png";
            //System.out.println(" filenevbe:" + szoveg);
            ImageIcon icon = new ImageIcon(szoveg, "A tartorajz");
            icon.getImage().flush();
            pngrajz.setIcon(icon);
            pngrajz.updateUI();
        }
    }//GEN-LAST:event_Szelveny_modositasActionPerformed

    private void Szelveny_kivalasztActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Szelveny_kivalasztActionPerformed
        // TODO add your handling code here:
        int db = 0;
        String szoveg;
        DefaultTableModel tableModel = (DefaultTableModel) alkotoelemek.getModel();

        profil.nev = osszetett_szelvenyek.getSelectedItem().toString();
        //profil.filenevbeiro();
        // Ha van hozzárendelve szelvény, akkor Jtable + rajzolás
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A darabszám beolvasása
            profil.parancs = "SELECT count(nev) FROM osszetett where ossznev = '" + profil.nev + "';";
            rs = st.executeQuery(profil.parancs);
            while (rs.next()) {
                db = rs.getInt(1);
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        // A filenév beolvasása
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            co = DriverManager.getConnection(Global.mysql_server, Global.mysql_user, Global.mysql_password);
            st = co.createStatement();
            // A darabszám beolvasása
            profil.parancs = "SELECT filenev FROM szelveny where nev = '" + profil.nev + "';";
            rs = st.executeQuery(profil.parancs);
            while (rs.next()) {
                profil.filenev = rs.getString("filenev");
            }
            rs.close();
            st.close();
        } catch (InstantiationException e) {
        } catch (IllegalAccessException e) {
        } catch (ClassNotFoundException e) {
        } catch (SQLException e) {
        }
        if (db != 0) {
            // Rajzolás
            profil.pngrajz();
            //System.out.println(" forgatas:" + profil.forgatas + " mirrorx:" + profil.tukrozesx + "  mirrory:" + profil.tukrozesy);
            szoveg = "./images/szelveny/" + profil.filenev + ".png";
            //System.out.println(" filenevbe:" + szoveg);
            ImageIcon icon = new ImageIcon(szoveg, "A tartorajz");
            icon.getImage().flush();
            pngrajz.setIcon(icon);
            pngrajz.updateUI();
            // Jtable
            // A Jtable törlése
            int j = tableModel.getRowCount();
            if (j > 0) {
                for (int k = 0; k < j; k++) {
                    tableModel.removeRow(0);
                }
            }
            // Jtable adatfeltöltése
            for (int i = 1; i <= profil.index; i++) {
                String[] data = new String[8];
                data[0] = String.valueOf(profil.bazis[i]);
                data[1] = profil.profilnev[i];
                data[2] = String.valueOf(profil.diffx[i]);
                data[3] = String.valueOf(profil.diffy[i]);
                data[4] = String.valueOf(profil.forgatas[i]);
                if (profil.problema[i] == 1) {
                    data[7] = "Átfedés";
                } else {
                    data[7] = " ";
                }
                tableModel.addRow(data);
                if (profil.mirrorx[i] == 1) {
                    tableModel.setValueAt(true, i - 1, 5);
                } else {
                    tableModel.setValueAt(false, i - 1, 5);
                }
                if (profil.mirrory[i] == 1) {
                    tableModel.setValueAt(true, i - 1, 6);
                } else {
                    tableModel.setValueAt(false, i - 1, 6);
                }
            }
            // A 2-4 -es oszlopok középre igazítása
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(uj_osszetett.CENTER);
            alkotoelemek.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            alkotoelemek.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            alkotoelemek.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
            // A tábla oszlopszélességei
            alkotoelemek.setAutoResizeMode(alkotoelemek.AUTO_RESIZE_OFF);
            alkotoelemek.getColumnModel().getColumn(0).setPreferredWidth(10);
            alkotoelemek.getColumnModel().getColumn(1).setPreferredWidth(105);
            alkotoelemek.getColumnModel().getColumn(2).setPreferredWidth(35);
            alkotoelemek.getColumnModel().getColumn(3).setPreferredWidth(35);
            alkotoelemek.getColumnModel().getColumn(4).setPreferredWidth(55);
            alkotoelemek.getColumnModel().getColumn(5).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(6).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(7).setPreferredWidth(45);
            alkotoelemek.getColumnModel().getColumn(8).setPreferredWidth(40);
            alkotoelemek.setModel(tableModel);
            alkotoelemek.setShowGrid(true);

        }
    }//GEN-LAST:event_Szelveny_kivalasztActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Mirrorx;
    private javax.swing.JRadioButton Mirrory;
    private javax.swing.JButton Szelveny_kivalaszt;
    private javax.swing.JButton Szelveny_modositas;
    private javax.swing.JButton Ujszelveny;
    private javax.swing.JTable alkotoelemek;
    private javax.swing.JTextField diffx;
    private javax.swing.JTextField diffy;
    private javax.swing.JTextField fok;
    private javax.swing.JSlider forgatas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox osszetett_szelvenyek;
    private javax.swing.JLabel pngrajz;
    private javax.swing.JComboBox szelveny;
    private javax.swing.JButton szelveny_hozzaad;
    private javax.swing.JTextField uj_osszetett;
    // End of variables declaration//GEN-END:variables
}
